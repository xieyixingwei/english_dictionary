[uwsgi]
# 项目名
project=server

# Ubuntu系统下默认用户名
#uid=www-data

# Ubuntu系统下默认用户组
#gid=www-data


base=/var/www/html/django_prj

# 项目根目录
chdir=%(base)/%(project)

# Python的虚拟环境目录,Docker部署时不需要
# home = %(base)/venv

# wsgi文件位置
module=%(project).wsgi:application

# DJANGO_SETTINGS_MODULE=server.settings

# 主进程
master=True

# 进程数,一般跟电脑的核数一样就行
processes=2

 # 线程数，可以一次性处理2*2=8个任务
threads=2

# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
# socket=/run/uwsgi/%(project).sock

# 选项3，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
socket=0.0.0.0:8052

# 选项1，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
# http=0.0.0.0:8052


# socket权限设置
#chown-socket=%(uid):www-data
#chmod-socket=664

# 进程文件
pidfile=/tmp/django-%(project)-master.pid

# 以后台守护进程运行，并将log日志存于temp文件夹
daemonize=/tmp/django-%(project)-uwsgi.log

# 服务停止时，自动移除unix socket和pid文件
vacuum=True

# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启
max-requests=5000

# 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃
harakiri=60
# 当一个请求被harakiri杀掉会，会输出一条日志
harakiri-verbose=true

# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size=65536

# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering=65536

# 开启内存使用情况报告
memory-report=true
# 设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy=10
# 设置工作进程使用虚拟内存超过N MB就回收重启
reload-on-as= 1024
